"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withParams = withParams;

var _react = _interopRequireDefault(require("react"));

var _ = require("../..");

var _tools = require("../tools");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * HOC для добавления
 * params:{@link PageParams}
 * в компонент
 * параметры не обновляются при переходах по страницам
 * @param Component
 * @param panelId если true, то из props будет взято свойство id для передачи в {@link useParams}, если строка то она будет передана
 */
function withParams(Component) {
  var panelId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  function WithParams(props) {
    var proxyPanelId = undefined;

    if (typeof panelId === 'string') {
      proxyPanelId = panelId;
    } else if (panelId) {
      var p = props;

      if (p && p.id) {
        proxyPanelId = p.id;
      }
    }

    var params = {
      params: (0, _.useParams)(proxyPanelId)
    }; // eslint-disable-next-line @typescript-eslint/consistent-type-assertions

    var allProps = _objectSpread(_objectSpread({}, props), params);

    return /*#__PURE__*/_react["default"].createElement(Component, allProps);
  }

  WithParams.displayName = "WithParams(".concat((0, _tools.getDisplayName)(Component), ")");
  return WithParams;
}