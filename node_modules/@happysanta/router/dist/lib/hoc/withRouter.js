"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withSantaRouter = withSantaRouter;
exports.withRouter = withRouter;

var _react = _interopRequireDefault(require("react"));

var _ = require("../..");

var _tools = require("../tools");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @deprecated use withRouter
 * @ignore
 */
function withSantaRouter(Component) {
  return withRouter(Component);
}
/**
 * HOC для добавления свойств
 *
 * location:{@link Location}
 * router:{@link Router}
 *
 * в переданный компонент
 *
 * ```typescript
 * export default withRouter(App);
 * ```
 * @param Component
 * @param withUpdate true - обновлять изменении при изменении location false - не обновлять
 */


function withRouter(Component) {
  var withUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  function WithRouter(props) {
    var router = (0, _.useRouter)(withUpdate);
    var routerProps = {
      router: router,
      location: router.getCurrentLocation(),
      routeState: router.getCurrentStateOrDef(),
      route: router.getCurrentRouteOrDef()
    }; // eslint-disable-next-line @typescript-eslint/consistent-type-assertions

    var propsWithRouter = _objectSpread(_objectSpread({}, props), routerProps);

    return /*#__PURE__*/_react["default"].createElement(Component, propsWithRouter);
  }

  WithRouter.displayName = "WithRouter(".concat((0, _tools.getDisplayName)(Component), ")");
  return WithRouter;
}